#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_QUEUE_SIZE 100
#define TIME_QUANTUM 2

struct Process {
    int id;
    int priority;
    int burst_time;
    int remaining_time;
};

void swap(struct Process *a, struct Process *b) {
    struct Process temp = *a;
    *a = *b;
    *b = temp;
}

void sortProcesses(struct Process processes[], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (processes[i].priority > processes[j].priority) {
                swap(&processes[i], &processes[j]);
            }
        }
    }
}

void executeQueue1(struct Process processes[], int n) {
    int time = 0;
    while (true) {
        bool found = false;
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0 && processes[i].priority == 0) {
                found = true;
                if (processes[i].remaining_time <= TIME_QUANTUM) {
                    time += processes[i].remaining_time;
                    processes[i].remaining_time = 0;
                    printf("Process P%d executed in Queue 1 for %d units.\n", processes[i].id, processes[i].burst_time);
                } else {
                    time += TIME_QUANTUM;
                    processes[i].remaining_time -= TIME_QUANTUM;
                    printf("Process P%d executed in Queue 1 for %d units.\n", processes[i].id, TIME_QUANTUM);
                }
            }
        }

        if (!found) {
            break;
        }
    }
}

void executeQueue2(struct Process processes[], int n) {
    int time = 0;
    int index = 0;

    while (true) {
        bool found = false;
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                found = true;
                if (processes[i].remaining_time <= TIME_QUANTUM) {
                    time += processes[i].remaining_time;
                    processes[i].remaining_time = 0;
                    printf("Process P%d executed in Queue 2 for %d units.\n", processes[i].id, processes[i].burst_time);
                } else {
                    time += TIME_QUANTUM;
                    processes[i].remaining_time -= TIME_QUANTUM;
                    printf("Process P%d executed in Queue 2 for %d units.\n", processes[i].id, TIME_QUANTUM);
                }
            }
        }

        if (!found) {
            break;
        }
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[MAX_QUEUE_SIZE];

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter priority and burst time for Process P%d: ", i + 1);
        scanf("%d%d", &processes[i].priority, &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
    }

    sortProcesses(processes, n);

    executeQueue1(processes, n);
    executeQueue2(processes, n);

    return 0;
}
